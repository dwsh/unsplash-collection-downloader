#!/bin/bash

set -e

show_help() {
    cat << EOF
Usage: $0 [OPTIONS] -f JSON_FILE -k GHOST_API_KEY -u GHOST_URL
Export JSON data generated by generate-content-from-images.sh to Ghost CMS as posts or pages.

OPTIONS:
    -f, --file JSON_FILE       Input JSON file path (required)
    -k, --api-key API_KEY      Ghost Admin API key (id:secret format) (required) 
    -u, --url GHOST_URL        Ghost site URL (e.g., https://yourblog.com) (required)
    -t, --type TYPE            Content type: 'post' or 'page' (default: post)
    -s, --status STATUS        Publication status: 'draft' or 'published' (default: draft)
    -a, --author AUTHOR_ID     Author ID (optional, uses default if not provided)
    -d, --dry-run              Show what would be created without actually posting
    -v, --verbose              Enable verbose output
    -h, --help                 Show this help message

EXAMPLES:
    # Export as draft posts
    $0 -f collection_123/image_metadata.json -k "your_id:your_secret" -u "https://yourblog.com"
    
    # Export as published pages with specific author
    $0 -f collection_123/image_metadata.json -k "your_id:your_secret" -u "https://yourblog.com" -t page -s published -a "author_id_123"
    
    # Dry run to preview what would be created
    $0 -f collection_123/image_metadata.json -k "your_id:your_secret" -u "https://yourblog.com" --dry-run

API KEY:
    Get your Ghost Admin API key from Ghost Admin > Settings > Integrations > Add custom integration
    The key format is: id:secret (e.g., "507f1f77bcf86cd799439011:1234567890abcdef")

REQUIREMENTS:
    - curl command for API requests
    - Python 3 with json module for data processing
    - Base64 encoding utilities
    - OpenSSL for JWT token generation
    - jq for JSON processing

EOF
}

log() {
    if [[ "$VERBOSE" == "true" ]]; then
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
    fi
}

error() {
    echo "ERROR: $1" >&2
    exit 1
}

validate_dependencies() {
    log "Checking dependencies..."
    
    command -v curl >/dev/null 2>&1 || error "curl is required but not installed"
    command -v python3 >/dev/null 2>&1 || error "Python 3 is required but not installed"
    command -v openssl >/dev/null 2>&1 || error "OpenSSL is required but not installed"
    command -v base64 >/dev/null 2>&1 || error "base64 command is required but not installed"
    command -v jq >/dev/null 2>&1 || error "jq is required but not installed"
    
    python3 -c "import json, base64, time, hashlib, hmac" 2>/dev/null || error "Required Python modules not available"
    
    log "All dependencies validated"
}

validate_inputs() {
    log "Validating inputs..."
    
    [[ -z "$JSON_FILE" ]] && error "JSON file is required (-f)"
    [[ -z "$GHOST_API_KEY" ]] && error "Ghost API key is required (-k)"
    [[ -z "$GHOST_URL" ]] && error "Ghost URL is required (-u)"
    
    [[ ! -f "$JSON_FILE" ]] && error "JSON file not found: $JSON_FILE"
    
    if [[ "$GHOST_API_KEY" != *":"* ]]; then
        error "Ghost API key must be in format 'id:secret'"
    fi
    
    if [[ "$CONTENT_TYPE" != "post" && "$CONTENT_TYPE" != "page" ]]; then
        error "Content type must be 'post' or 'page'"
    fi
    
    if [[ "$STATUS" != "draft" && "$STATUS" != "published" ]]; then
        error "Status must be 'draft' or 'published'"
    fi
    
    GHOST_URL="${GHOST_URL%/}"
    
    log "All inputs validated"
}

generate_jwt_token() {
    local api_key="$1"
    local api_id="${api_key%:*}"
    local api_secret="${api_key#*:}"
    
    log "Generating JWT token for API authentication..."
    
    python3 << EOF
import json
import base64
import time
import hashlib
import hmac

# JWT Header
header = {
    "typ": "JWT",
    "alg": "HS256",
    "kid": "$api_id"
}

# JWT Payload
now = int(time.time())
payload = {
    "iat": now,
    "exp": now + 300,  # Token expires in 5 minutes
    "aud": "/admin/"
}

# Encode header and payload
header_encoded = base64.urlsafe_b64encode(json.dumps(header, separators=(',', ':')).encode()).decode().rstrip('=')
payload_encoded = base64.urlsafe_b64encode(json.dumps(payload, separators=(',', ':')).encode()).decode().rstrip('=')

# Create signature
secret_bytes = bytes.fromhex("$api_secret")
message = f"{header_encoded}.{payload_encoded}".encode()
signature = hmac.new(secret_bytes, message, hashlib.sha256).digest()
signature_encoded = base64.urlsafe_b64encode(signature).decode().rstrip('=')

# Complete JWT token
jwt_token = f"{header_encoded}.{payload_encoded}.{signature_encoded}"
print(jwt_token)
EOF
}

upload_image() {
    local image_path="$1"
    local jwt_token="$2"
    
    if [[ ! -f "$image_path" ]]; then
        echo ""
        return
    fi
    
    log "Uploading image: $image_path"
    
    if [[ "$DRY_RUN" == "true" ]]; then
        echo "https://example.com/uploaded-image.jpg"
        return
    fi
    
    local response
    response=$(curl -s -X POST \
        "$GHOST_URL/ghost/api/admin/images/upload/" \
        -H "Authorization: Ghost $jwt_token" \
        -F "file=@$image_path" \
        -F "purpose=image")
    
    local upload_url
    upload_url=$(echo "$response" | python3 -c "
import json, sys
try:
    data = json.load(sys.stdin)
    if 'images' in data and len(data['images']) > 0:
        print(data['images'][0]['url'])
    else:
        print('', file=sys.stderr)
except:
    print('', file=sys.stderr)
")
    
    if [[ -n "$upload_url" ]]; then
        log "Image uploaded successfully: $upload_url"
        echo "$upload_url"
    else
        log "Failed to upload image: $image_path"
        echo ""
    fi
}

generate_tags() {
    local title="$1"
    local content="$2"
    
    python3 << EOF
import re
import json

title = """$title"""
content = """$content"""

# Extract potential tags from title and content
text = (title + " " + content).lower()

# Remove HTML tags
text = re.sub(r'<[^>]+>', ' ', text)

# Common photography/travel/art related tags
potential_tags = [
    'photography', 'travel', 'architecture', 'nature', 'landscape', 
    'cityscape', 'street', 'portrait', 'art', 'culture', 'history',
    'adventure', 'explore', 'journey', 'wanderlust', 'scenic',
    'beautiful', 'inspiration', 'creative', 'artistic', 'visual'
]

# Find matching tags
found_tags = []
for tag in potential_tags:
    if tag in text and len(found_tags) < 4:
        found_tags.append(tag)

# If we don't have enough tags, add some generic ones
if len(found_tags) < 2:
    generic_tags = ['photography', 'visual', 'inspiration', 'art']
    for tag in generic_tags:
        if tag not in found_tags and len(found_tags) < 4:
            found_tags.append(tag)

print(json.dumps(found_tags[:4]))
EOF
}

create_photo_credit() {
    local photographer_name="$1"
    local photo_title="$2"
    local photo_url="$3"
    
    cat << EOF
<div class="photo-credit" style="margin-top: 2rem; padding: 1rem; border-left: 4px solid #e1e1e1; background: #f8f8f8;">
    <p style="margin: 0; font-size: 0.9rem; color: #666;">
        <strong>Photo Credit:</strong> 
        <em>$photo_title</em> by 
        <a href="$photo_url" target="_blank" rel="noopener">$photographer_name</a>
        on <a href="https://unsplash.com" target="_blank" rel="noopener">Unsplash</a>
    </p>
</div>
EOF
}

create_ghost_content() {
    local title="$1"
    local html_content="$2"
    local photographer_name="$3"
    local photo_title="$4"
    local photo_url="$5"
    local featured_image_url="$6"
    local content_type="$7"
    local status="$8"
    local author_id="$9"
    
    local photo_credit
    photo_credit=$(create_photo_credit "$photographer_name" "$photo_title" "$photo_url")
    
    local full_content="$html_content$photo_credit"
    
    local tags_json
    tags_json=$(generate_tags "$title" "$html_content")
    
    local current_time
    current_time=$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")
    
    python3 << EOF
import json

# Parse tags
tags = json.loads('$tags_json')
tag_objects = [{"name": tag} for tag in tags]

# Build content object
content_data = {
    "title": """$title""",
    "html": """$full_content""",
    "status": "$status",
    "created_at": "$current_time",
    "updated_at": "$current_time"
}

# Add featured image if available
if """$featured_image_url""".strip():
    content_data["feature_image"] = """$featured_image_url"""

# Add author if specified
if """$author_id""".strip():
    content_data["authors"] = [{"id": """$author_id"""}]

# Add tags
if tag_objects:
    content_data["tags"] = tag_objects

# Wrap in appropriate container
if "$content_type" == "post":
    result = {"posts": [content_data]}
else:
    result = {"pages": [content_data]}

print(json.dumps(result, ensure_ascii=False, indent=2))
EOF
}

post_to_ghost() {
    local json_payload="$1"
    local content_type="$2"
    local jwt_token="$3"
    
    local endpoint
    if [[ "$content_type" == "post" ]]; then
        endpoint="$GHOST_URL/ghost/api/admin/posts/?source=html"
    else
        endpoint="$GHOST_URL/ghost/api/admin/pages/?source=html"
    fi
    
    log "Posting to Ghost CMS: $endpoint"
    
    if [[ "$DRY_RUN" == "true" ]]; then
        echo "DRY RUN - Would post to: $endpoint"
        echo "Payload:"
        echo "$json_payload" | python3 -m json.tool
        echo "---"
        return 0
    fi
    
    local temp_file
    temp_file=$(mktemp)
    echo "$json_payload" > "$temp_file"
    
    local response
    response=$(curl -s -w "\n%{http_code}" -X POST \
        "$endpoint" \
        -H "Authorization: Ghost $jwt_token" \
        -H "Content-Type: application/json" \
        -d @"$temp_file")
    
    rm -f "$temp_file"
    
    local http_code
    http_code=$(echo "$response" | tail -n1)
    local response_body
    response_body=$(echo "$response" | head -n -1)
    
    if [[ "$http_code" == "201" ]]; then
        local content_url
        content_url=$(echo "$response_body" | python3 -c "
import json, sys
try:
    data = json.load(sys.stdin)
    if 'posts' in data and len(data['posts']) > 0:
        print(data['posts'][0]['url'])
    elif 'pages' in data and len(data['pages']) > 0:
        print(data['pages'][0]['url'])
    else:
        print('Created successfully')
except:
    print('Created successfully')
")
        echo "✓ Created successfully: $content_url"
        return 0
    else
        echo "✗ Failed to create $content_type (HTTP $http_code)"
        echo "$response_body" | python3 -m json.tool 2>/dev/null || echo "$response_body"
        return 1
    fi
}

process_json_item() {
    local json_item="$1"
    local jwt_token="$2"
    local item_number="$3"
    
    log "Processing item $item_number..."
    
    # Extract fields from JSON item
    local filename=$(echo "$json_item" | jq -r '.filename // ""')
    local photo_id=$(echo "$json_item" | jq -r '.id // ""')
    local description=$(echo "$json_item" | jq -r '.description // ""')
    local photographer_name=$(echo "$json_item" | jq -r '.photographer // ""')
    local photo_url=$(echo "$json_item" | jq -r '.photo_url // ""')
    local blog_title=$(echo "$json_item" | jq -r '.blog_title // ""')
    local blog_content=$(echo "$json_item" | jq -r '.blog_content // ""')
    
    if [[ -z "$blog_title" || -z "$blog_content" ]]; then
        echo "✗ Item $item_number: Missing blog title or content"
        return 1
    fi
    
    # Check for error status in generated content
    if [[ "$blog_title" == "Error:"* ]]; then
        echo "✗ Item $item_number: Content generation failed - $blog_title"
        return 1
    fi
    
    # Find the actual image file
    local json_dir
    json_dir=$(dirname "$JSON_FILE")
    local image_path="$json_dir/$filename"
    
    # Upload featured image
    local featured_image_url=""
    if [[ -f "$image_path" ]]; then
        featured_image_url=$(upload_image "$image_path" "$jwt_token")
    else
        log "Warning: Image file not found: $image_path"
    fi
    
    # Create Ghost content payload
    local json_payload
    json_payload=$(create_ghost_content "$blog_title" "$blog_content" "$photographer_name" "$description" "$photo_url" "$featured_image_url" "$CONTENT_TYPE" "$STATUS" "$AUTHOR_ID")
    
    if [[ "$VERBOSE" == "true" ]]; then
        echo "Generated payload for row $row_number:"
        echo "$json_payload" | python3 -m json.tool
        echo "---"
    fi
    
    # Post to Ghost
    post_to_ghost "$json_payload" "$CONTENT_TYPE" "$jwt_token"
}

main() {
    # Default values
    CONTENT_TYPE="post"
    STATUS="draft"
    AUTHOR_ID=""
    DRY_RUN="false"
    VERBOSE="false"
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -f|--file)
                JSON_FILE="$2"
                shift 2
                ;;
            -k|--api-key)
                GHOST_API_KEY="$2"
                shift 2
                ;;
            -u|--url)
                GHOST_URL="$2"
                shift 2
                ;;
            -t|--type)
                CONTENT_TYPE="$2"
                shift 2
                ;;
            -s|--status)
                STATUS="$2"
                shift 2
                ;;
            -a|--author)
                AUTHOR_ID="$2"
                shift 2
                ;;
            -d|--dry-run)
                DRY_RUN="true"
                shift
                ;;
            -v|--verbose)
                VERBOSE="true"
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                error "Unknown option: $1. Use -h for help."
                ;;
        esac
    done
    
    validate_dependencies
    validate_inputs
    
    echo "Starting Ghost CMS export..."
    echo "File: $JSON_FILE"
    echo "Ghost URL: $GHOST_URL"
    echo "Content Type: $CONTENT_TYPE"
    echo "Status: $STATUS"
    [[ "$DRY_RUN" == "true" ]] && echo "Mode: DRY RUN"
    echo ""
    
    # Generate JWT token
    local jwt_token
    jwt_token=$(generate_jwt_token "$GHOST_API_KEY")
    
    if [[ -z "$jwt_token" ]]; then
        error "Failed to generate JWT token"
    fi
    
    log "JWT token generated successfully"
    
    # Process JSON file
    local item_count=0
    local success_count=0
    local error_count=0
    
    # Get total number of items
    local total_items=$(jq '. | length' "$JSON_FILE")
    echo "Found $total_items items to process"
    echo ""
    
    # Process each JSON item
    for ((i = 0; i < total_items; i++)); do
        ((item_count++))
        
        # Extract JSON item
        local json_item=$(jq ".[$i]" "$JSON_FILE")
        
        echo "Processing item $item_count/$total_items..."
        if process_json_item "$json_item" "$jwt_token" "$item_count"; then
            ((success_count++))
        else
            ((error_count++))
        fi
        
        # Add small delay between requests to be respectful to Ghost API
        sleep 1
    done
    
    echo ""
    echo "Export completed!"
    echo "Items processed: $item_count"
    echo "Successful: $success_count"
    echo "Errors: $error_count"
}

# Execute main function with all arguments
main "$@"